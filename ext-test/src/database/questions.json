[
	{
		"id": 1,
		"title": "Two_Sum",
		"question": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.",
		"example": "Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].",
		"starterCode": "def twoSum(nums, target):\n    pass"
	},
	{
		"id": 2,
		"title": "Add_Two_Numbers",
		"question": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.",
		"example": "Input: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.",
		"starterCode": "def addTwoNumbers(l1, l2):\n    pass"
	},
	{
		"id": 3,
		"title": "Longest_Substring_Without_Repeating_Characters",
		"question": "Given a string s, find the length of the longest substring without repeating characters.",
		"example": "Input: s = 'abcabcbb'\nOutput: 3\nExplanation: The answer is 'abc', with the length of 3.",
		"starterCode": "def lengthOfLongestSubstring(s):\n    pass"
	},
	{
		"id": 4,
		"title": "Median_of_Two_Sorted_Arrays",
		"question": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n\nThe overall run time complexity should be O(log (m+n)).",
		"example": "Input: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.",
		"starterCode": "def findMedianSortedArrays(nums1, nums2):\n    pass"
	},
	{
		"id": 5,
		"title": "Longest_Palindromic_Substring",
		"question": "Given a string s, return the longest palindromic substring in s.",
		"example": "Input: s = 'babad'\nOutput: 'bab'\nNote: 'aba' is also a valid answer.",
		"starterCode": "def longestPalindrome(s):\n    pass"
	},
	{
		"id": 6,
		"title": "Reverse_Integer",
		"question": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.",
		"example": "Input: x = 123\nOutput: 321",
		"starterCode": "def reverse(x):\n    pass"
	},
	{
		"id": 7,
		"title": "Valid_Parentheses",
		"question": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.",
		"example": "Input: s = '()[]{}'\nOutput: true",
		"starterCode": "def isValid(s):\n    pass"
	},
	{
		"id": 8,
		"title": "Merge_Two_Sorted_Lists",
		"question": "Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.",
		"example": "Input: l1 = [1,2,4], l2 = [1,3,4]\nOutput: [1,1,2,3,4,4]",
		"starterCode": "def mergeTwoLists(l1, l2):\n    pass"
	},
	{
		"id": 9,
		"title": "Palindrome_Number",
		"question": "Given an integer x, return true if x is palindrome integer.\n\nAn integer is a palindrome when it reads the same backward as forward. For example, 121 is palindrome while 123 is not.",
		"example": "Input: x = 121\nOutput: true",
		"starterCode": "def isPalindrome(x):\n    pass"
	},
	{
		"id": 10,
		"title": "Container_With_Most_Water",
		"question": "Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.",
		"example": "Input: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49",
		"starterCode": "def maxArea(height):\n    pass"
	},
	{
		"id": 11,
		"title": "Roman_to_Integer",
		"question": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n\nFor example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\nI can be placed before V (5) and X (10) to make 4 and 9.\nX can be placed before L (50) and C (100) to make 40 and 90.\nC can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.",
		"example": "Input: s = 'III'\nOutput: 3",
		"starterCode": "def romanToInt(s):\n    pass"
	},
	{
		"id": 12,
		"title": "Valid_Sudoku",
		"question": "Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n\n1. Each row must contain the digits 1-9 without repetition.\n2. Each column must contain the digits 1-9 without repetition.\n3. Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.",
		"example": "Input: board = [['5','3','.','.','7','.','.','.','.'],['6','.','.','1','9','5','.','.','.'],['.','9','8','.','.','.','.','6','.'],['8','.','.','.','6','.','.','.','3'],['4','.','.','8','.','3','.','.','1'],['7','.','.','.','2','.','.','.','6'],['.','6','.','.','.','.','2','8','.'],['.','.','.','4','1','9','.','.','5'],['.','.','.','.','8','.','.','7','9']]\nOutput: true",
		"starterCode": "def isValidSudoku(board):\n    pass"
	},
	{
		"id": 13,
		"title": "String_to_Integer_(atoi)",
		"question": "Implement atoi which converts a string to an integer.\n\nThe function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.\n\nThe string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.\n\nIf the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.\n\nIf no valid conversion could be performed, a zero value is returned.",
		"example": "Input: s = '42'\nOutput: 42",
		"starterCode": "def myAtoi(s):\n    pass"
	},
	{
		"id": 14,
		"title": "Reverse_Linked_List",
		"question": "Given the head of a singly linked list, reverse the list, and return the reversed list.",
		"example": "Input: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]",
		"starterCode": "def reverseList(head):\n    pass"
	},
	{
		"id": 15,
		"title": "Palindrome_Linked_List",
		"question": "Given the head of a singly linked list, return true if it is a palindrome.",
		"example": "Input: head = [1,2,2,1]\nOutput: true",
		"starterCode": "def isPalindrome(head):\n    pass"
	},
	{
		"id": 16,
		"title": "Merge_k_Sorted_Lists",
		"question": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\n\nMerge all the linked-lists into one sorted linked-list and return it.",
		"example": "Input: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]",
		"starterCode": "def mergeKLists(lists):\n    pass"
	},
	{
		"id": 17,
		"title": "Remove_Nth_Node_From_End_of_List",
		"question": "Given the head of a linked list, remove the nth node from the end of the list and return its head.",
		"example": "Input: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]",
		"starterCode": "def removeNthFromEnd(head, n):\n    pass"
	},
	{
		"id": 18,
		"title": "Valid_Palindrome",
		"question": "Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.",
		"example": "Input: s = 'A man, a plan, a canal: Panama'\nOutput: true",
		"starterCode": "def isPalindrome(s):\n    pass"
	},
	{
		"id": 19,
		"title": "Merge_Two_Sorted_Arrays",
		"question": "Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.\n\nThe number of elements initialized in nums1 and nums2 are m and n respectively. You may assume that nums1 has a size equal to m + n such that it has enough space to hold additional elements from nums2.",
		"example": "Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\nOutput: [1,2,2,3,5,6]",
		"starterCode": "def merge(nums1, m, nums2, n):\n    pass"
	},
	{
		"id": 20,
		"title": "Symmetric_Tree",
		"question": "Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).",
		"example": "Input: root = [1,2,2,3,4,4,3]\nOutput: true",
		"starterCode": "def isSymmetric(root):\n    pass"
	},
	{
		"id": 21,
		"title": "Binary_Tree_Level_Order_Traversal",
		"question": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).",
		"example": "Input: root = [3,9,20,null,null,15,7]\nOutput: [[3],[9,20],[15,7]]",
		"starterCode": "def levelOrder(root):\n    pass"
	},
	{
		"id": 22,
		"title": "Maximum_Depth_of_Binary_Tree",
		"question": "Given the root of a binary tree, return its maximum depth.\n\nA binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.",
		"example": "Input: root = [3,9,20,null,null,15,7]\nOutput: 3",
		"starterCode": "def maxDepth(root):\n    pass"
	},
	{
		"id": 23,
		"title": "Validate_Binary_Search_Tree",
		"question": "Given the root of a binary tree, determine if it is a valid binary search tree (BST).\n\nA valid BST is defined as follows:\n\n1. The left subtree of a node contains only nodes with keys less than the node's key.\n2. The right subtree of a node contains only nodes with keys greater than the node's key.\n3. Both the left and right subtrees must also be binary search trees.",
		"example": "Input: root = [2,1,3]\nOutput: true",
		"starterCode": "def isValidBST(root):\n    pass"
	},
	{
		"id": 24,
		"title": "Binary_Tree_Inorder_Traversal",
		"question": "Given the root of a binary tree, return the inorder traversal of its nodes' values.",
		"example": "Input: root = [1,null,2,3]\nOutput: [1,3,2]",
		"starterCode": "def inorderTraversal(root):\n    pass"
	},
	{
		"id": 25,
		"title": "Binary_Tree_Preorder_Traversal",
		"question": "Given the root of a binary tree, return the preorder traversal of its nodes' values.",
		"example": "Input: root = [1,null,2,3]\nOutput: [1,2,3]",
		"starterCode": "def preorderTraversal(root):\n    pass"
	}
]